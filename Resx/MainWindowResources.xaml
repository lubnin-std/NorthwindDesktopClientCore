<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:NorthwindDesktopClientCore.Resx"
                    xmlns:viewmodels="clr-namespace:NorthwindDesktopClientCore.ViewModel"
                    xmlns:views="clr-namespace:NorthwindDesktopClientCore.View">
    
    <!-- Сопоставление View и ViewModel'ов -->
    <!-- Каждый ...ViewModel - это по сути такой же тип, как и что-то попроще, например, какой-нибудь Person.
    Как для Person через DataTemplate можно задать, как он будет отображаться в условном списке, так и для
    ViewModel можно задать шаблон, по которому Wpf будет его выводить [куда бы то ни было].
    Собственно шаблон, т.е. фактическая разметка, у нас описан во View'хах, которые мы тут и указываем -->
    <DataTemplate DataType="{x:Type viewmodels:EmployeeViewModel}">
        <views:EmployeeView />
    </DataTemplate>

    <DataTemplate DataType="{x:Type viewmodels:AllEmployeesViewModel}">
        <views:AllEmployeesView/>
    </DataTemplate>

    
    <!-- Шаблон для области команд -->
    <DataTemplate x:Key="CommandsTemplate">
        <TextBlock>
            <Hyperlink Command="{Binding Path=Command}">
                <TextBlock Text="{Binding Path=DisplayName}"/>
            </Hyperlink>
        </TextBlock>
    </DataTemplate>


    <!-- Шаблоны для области Workspace -->
    <DataTemplate x:Key="ClosableTabItemTemplate">
        <DockPanel>
            <Button
                Command="{Binding Path=CloseCommand}"
                Content="X"
                DockPanel.Dock="Right"
                Focusable="False"
                />
            <ContentPresenter
                Content="{Binding Path=DisplayName}"
                />
        </DockPanel>
    </DataTemplate>

    <!-- Пустой {Binding} говорит - "бери у родителя"
    TabControl характерен тем, что имеет и ItemTemplate, и ContentTemplate, в отличие от других потомков
    Selector'а, которые ContentTemplate'а не имеют, например, ListBox и ComboBox.
    ItemTemplate задает шаблон ТОЛЬКО ДЛЯ ЗАГОЛОВКА итема. 
    Шаблон для КОНТЕНТА задавать не надо. Каждый итем коллекции Workspace будет обернут в TabItem.
    В этой коллекции будут лежать итемы конкретных типов, например, EmployeeViewModel, а для них
    "шаблон" задан в начале этого файла. -->
    <DataTemplate x:Key="WorkspaceTemplate">
        <TabControl
            IsSynchronizedWithCurrentItem="True"
            ItemsSource="{Binding}"
            ItemTemplate="{StaticResource ClosableTabItemTemplate}"
            />
    </DataTemplate>

    <!-- Меню команд автоматически разворачивается и скрывается при наведении мыши-->
    <Style TargetType="Expander" x:Key="AutoExpander">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="IsExpanded" Value="True"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="IsExpanded" Value="False"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
</ResourceDictionary>